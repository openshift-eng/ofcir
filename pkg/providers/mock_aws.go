// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go

// Package providers is a generated GoMock package.
package providers

import (
	context "context"
	reflect "reflect"

	credentials "github.com/aws/aws-sdk-go-v2/credentials"
	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// MockEC2ClientInterface is a mock of EC2ClientInterface interface.
type MockEC2ClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEC2ClientInterfaceMockRecorder
}

// MockEC2ClientInterfaceMockRecorder is the mock recorder for MockEC2ClientInterface.
type MockEC2ClientInterfaceMockRecorder struct {
	mock *MockEC2ClientInterface
}

// NewMockEC2ClientInterface creates a new mock instance.
func NewMockEC2ClientInterface(ctrl *gomock.Controller) *MockEC2ClientInterface {
	mock := &MockEC2ClientInterface{ctrl: ctrl}
	mock.recorder = &MockEC2ClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2ClientInterface) EXPECT() *MockEC2ClientInterfaceMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method.
func (m *MockEC2ClientInterface) DescribeInstances(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockEC2ClientInterfaceMockRecorder) DescribeInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockEC2ClientInterface)(nil).DescribeInstances), varargs...)
}

// RunInstances mocks base method.
func (m *MockEC2ClientInterface) RunInstances(ctx context.Context, params *ec2.RunInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunInstances", varargs...)
	ret0, _ := ret[0].(*ec2.RunInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInstances indicates an expected call of RunInstances.
func (mr *MockEC2ClientInterfaceMockRecorder) RunInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInstances", reflect.TypeOf((*MockEC2ClientInterface)(nil).RunInstances), varargs...)
}

// TerminateInstances mocks base method.
func (m *MockEC2ClientInterface) TerminateInstances(ctx context.Context, params *ec2.TerminateInstancesInput, optFns ...func(*ec2.Options)) (*ec2.TerminateInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateInstances", varargs...)
	ret0, _ := ret[0].(*ec2.TerminateInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateInstances indicates an expected call of TerminateInstances.
func (mr *MockEC2ClientInterfaceMockRecorder) TerminateInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateInstances", reflect.TypeOf((*MockEC2ClientInterface)(nil).TerminateInstances), varargs...)
}

// MockAWSClientsBuilderInterface is a mock of AWSClientsBuilderInterface interface.
type MockAWSClientsBuilderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAWSClientsBuilderInterfaceMockRecorder
}

// MockAWSClientsBuilderInterfaceMockRecorder is the mock recorder for MockAWSClientsBuilderInterface.
type MockAWSClientsBuilderInterfaceMockRecorder struct {
	mock *MockAWSClientsBuilderInterface
}

// NewMockAWSClientsBuilderInterface creates a new mock instance.
func NewMockAWSClientsBuilderInterface(ctrl *gomock.Controller) *MockAWSClientsBuilderInterface {
	mock := &MockAWSClientsBuilderInterface{ctrl: ctrl}
	mock.recorder = &MockAWSClientsBuilderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSClientsBuilderInterface) EXPECT() *MockAWSClientsBuilderInterfaceMockRecorder {
	return m.recorder
}

// GetEC2Client mocks base method.
func (m *MockAWSClientsBuilderInterface) GetEC2Client(ctx context.Context, region string, staticCredentials credentials.StaticCredentialsProvider) (EC2ClientInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEC2Client", ctx, region, staticCredentials)
	ret0, _ := ret[0].(EC2ClientInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2Client indicates an expected call of GetEC2Client.
func (mr *MockAWSClientsBuilderInterfaceMockRecorder) GetEC2Client(ctx, region, staticCredentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2Client", reflect.TypeOf((*MockAWSClientsBuilderInterface)(nil).GetEC2Client), ctx, region, staticCredentials)
}

// MockAWSHandlerInterface is a mock of AWSHandlerInterface interface.
type MockAWSHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAWSHandlerInterfaceMockRecorder
}

// MockAWSHandlerInterfaceMockRecorder is the mock recorder for MockAWSHandlerInterface.
type MockAWSHandlerInterfaceMockRecorder struct {
	mock *MockAWSHandlerInterface
}

// NewMockAWSHandlerInterface creates a new mock instance.
func NewMockAWSHandlerInterface(ctrl *gomock.Controller) *MockAWSHandlerInterface {
	mock := &MockAWSHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockAWSHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSHandlerInterface) EXPECT() *MockAWSHandlerInterfaceMockRecorder {
	return m.recorder
}

// FindInstanceRegion mocks base method.
func (m *MockAWSHandlerInterface) FindInstanceRegion(ctx context.Context, params *FindRegionParams) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInstanceRegion", ctx, params)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInstanceRegion indicates an expected call of FindInstanceRegion.
func (mr *MockAWSHandlerInterfaceMockRecorder) FindInstanceRegion(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInstanceRegion", reflect.TypeOf((*MockAWSHandlerInterface)(nil).FindInstanceRegion), ctx, params)
}

// GetInstanceInRegionPublicIP mocks base method.
func (m *MockAWSHandlerInterface) GetInstanceInRegionPublicIP(ctx context.Context, params *InstanceIdentifier) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceInRegionPublicIP", ctx, params)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceInRegionPublicIP indicates an expected call of GetInstanceInRegionPublicIP.
func (mr *MockAWSHandlerInterfaceMockRecorder) GetInstanceInRegionPublicIP(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceInRegionPublicIP", reflect.TypeOf((*MockAWSHandlerInterface)(nil).GetInstanceInRegionPublicIP), ctx, params)
}

// GetTotalAmountOfPoolInstancesInRegion mocks base method.
func (m *MockAWSHandlerInterface) GetTotalAmountOfPoolInstancesInRegion(ctx context.Context, params *PoolFilterParams) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmountOfPoolInstancesInRegion", ctx, params)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmountOfPoolInstancesInRegion indicates an expected call of GetTotalAmountOfPoolInstancesInRegion.
func (mr *MockAWSHandlerInterfaceMockRecorder) GetTotalAmountOfPoolInstancesInRegion(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmountOfPoolInstancesInRegion", reflect.TypeOf((*MockAWSHandlerInterface)(nil).GetTotalAmountOfPoolInstancesInRegion), ctx, params)
}

// IsInstanceInRegionActive mocks base method.
func (m *MockAWSHandlerInterface) IsInstanceInRegionActive(ctx context.Context, params *InstanceIdentifier) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstanceInRegionActive", ctx, params)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInstanceInRegionActive indicates an expected call of IsInstanceInRegionActive.
func (mr *MockAWSHandlerInterfaceMockRecorder) IsInstanceInRegionActive(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstanceInRegionActive", reflect.TypeOf((*MockAWSHandlerInterface)(nil).IsInstanceInRegionActive), ctx, params)
}

// ReleaseInstanceInRegion mocks base method.
func (m *MockAWSHandlerInterface) ReleaseInstanceInRegion(ctx context.Context, params *InstanceIdentifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseInstanceInRegion", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseInstanceInRegion indicates an expected call of ReleaseInstanceInRegion.
func (mr *MockAWSHandlerInterfaceMockRecorder) ReleaseInstanceInRegion(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseInstanceInRegion", reflect.TypeOf((*MockAWSHandlerInterface)(nil).ReleaseInstanceInRegion), ctx, params)
}

// RunInstanceInRegion mocks base method.
func (m *MockAWSHandlerInterface) RunInstanceInRegion(ctx context.Context, params *RunInstanceParams) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInstanceInRegion", ctx, params)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInstanceInRegion indicates an expected call of RunInstanceInRegion.
func (mr *MockAWSHandlerInterfaceMockRecorder) RunInstanceInRegion(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInstanceInRegion", reflect.TypeOf((*MockAWSHandlerInterface)(nil).RunInstanceInRegion), ctx, params)
}
